<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\LPC1768-Mini-DK.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\LPC1768-Mini-DK.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri Nov 09 18:02:40 2012
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_EndPoint2 &rArr; MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_MemoryRead &rArr; disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[ae]">send_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae]">send_cmd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_lpc17xx.o(i.SystemInit) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3a]">UARTGetChar</a> from debug_frmwrk.o(i.UARTGetChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[33]">UARTPutChar</a> from debug_frmwrk.o(i.UARTPutChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[37]">UARTPutDec</a> from debug_frmwrk.o(i.UARTPutDec) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[38]">UARTPutDec16</a> from debug_frmwrk.o(i.UARTPutDec16) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[39]">UARTPutDec32</a> from debug_frmwrk.o(i.UARTPutDec32) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[34]">UARTPutHex</a> from debug_frmwrk.o(i.UARTPutHex) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[35]">UARTPutHex16</a> from debug_frmwrk.o(i.UARTPutHex16) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[36]">UARTPutHex32</a> from debug_frmwrk.o(i.UARTPutHex32) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[31]">UARTPuts</a> from debug_frmwrk.o(i.UARTPuts) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[32]">UARTPuts_</a> from debug_frmwrk.o(i.UARTPuts_) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3b]">USB_EndPoint0</a> from usbcore.o(i.USB_EndPoint0) referenced from usbuser.o(.constdata)
 <LI><a href="#[3c]">USB_EndPoint2</a> from usbuser.o(i.USB_EndPoint2) referenced from usbuser.o(.constdata)
 <LI><a href="#[22]">USB_IRQHandler</a> from usbhw.o(i.USB_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[30]">fputc</a> from main.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[2d]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[c1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[c2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(i.CLKPWR_ConfigPPWR))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[43]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(i.CLKPWR_GetPCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[44]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(i.CLKPWR_GetPCLKSEL))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[bc]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(i.CLKPWR_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
</UL>

<P><STRONG><a name="[84]"></a>EPAdr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhw.o(i.EPAdr))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[94]"></a>USB_Configure_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(i.USB_Configure_Event))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[8e]"></a>USB_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_DirCtrlEP))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[45]"></a>DataInFormat</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mscuser.o(i.DataInFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
</UL>

<P><STRONG><a name="[48]"></a>DataInTransfer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mscuser.o(i.DataInTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DataInTransfer &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
</UL>

<P><STRONG><a name="[ab]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mmc.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[4c]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(i.GPIO_ReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_timerproc
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(i.GPIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>

<P><STRONG><a name="[4f]"></a>Host_CtrlRecv</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(i.Host_CtrlRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[52]"></a>Host_CtrlSend</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(i.Host_CtrlSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlSend &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>Host_DelayMS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(i.Host_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[54]"></a>Host_DelayUS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_DelayUS))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>

<P><STRONG><a name="[5a]"></a>Host_EDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_EDInit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[55]"></a>Host_EnumDev</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, usbhost_lpc17xx.o(i.Host_EnumDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Host_EnumDev &rArr; Host_CtrlSend &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>Host_FillSetup</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, usbhost_lpc17xx.o(i.Host_FillSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[5c]"></a>Host_HCCAInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_HCCAInit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[59]"></a>Host_Init</STRONG> (Thumb, 330 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(i.Host_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_Init &rArr; Host_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TDInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_HCCAInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EDInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Host_ProcessTD</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbhost_lpc17xx.o(i.Host_ProcessTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WDHWait
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[5b]"></a>Host_TDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_TDInit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[5d]"></a>Host_WDHWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_WDHWait))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>

<P><STRONG><a name="[5e]"></a>MSC_BulkIn</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mscuser.o(i.MSC_BulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = MSC_BulkIn &rArr; MSC_MemoryRead &rArr; disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[60]"></a>MSC_BulkOut</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mscuser.o(i.MSC_BulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_MemoryRead &rArr; disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[62]"></a>MSC_GetCBW</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, mscuser.o(i.MSC_GetCBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = MSC_GetCBW &rArr; MSC_MemoryRead &rArr; disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[97]"></a>MSC_GetMaxLUN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscuser.o(i.MSC_GetMaxLUN))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[67]"></a>MSC_Inquiry</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, mscuser.o(i.MSC_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[5f]"></a>MSC_MemoryRead</STRONG> (Thumb, 132 bytes, Stack size 528 bytes, mscuser.o(i.MSC_MemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = MSC_MemoryRead &rArr; disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>

<P><STRONG><a name="[64]"></a>MSC_MemoryVerify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mscuser.o(i.MSC_MemoryVerify))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[63]"></a>MSC_MemoryWrite</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, mscuser.o(i.MSC_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_MemoryWrite &rArr; disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[69]"></a>MSC_ModeSense10</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mscuser.o(i.MSC_ModeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MSC_ModeSense10 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[68]"></a>MSC_ModeSense6</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mscuser.o(i.MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MSC_ModeSense6 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[6c]"></a>MSC_RWSetup</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, mscuser.o(i.MSC_RWSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSC_RWSetup &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[6b]"></a>MSC_ReadCapacity</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mscuser.o(i.MSC_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MSC_ReadCapacity &rArr; disk_ioctl &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[6a]"></a>MSC_ReadFormatCapacity</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mscuser.o(i.MSC_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MSC_ReadFormatCapacity &rArr; disk_ioctl &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[66]"></a>MSC_RequestSense</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mscuser.o(i.MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MSC_RequestSense &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[96]"></a>MSC_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscuser.o(i.MSC_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[46]"></a>MSC_SetCSW</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mscuser.o(i.MSC_SetCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>

<P><STRONG><a name="[65]"></a>MSC_TestUnitReady</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mscuser.o(i.MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSC_TestUnitReady &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[70]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(i.PINSEL_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PinFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[9b]"></a>RdCmdDat</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbhw.o(i.RdCmdDat))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>ReadLE16U</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(i.ReadLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[74]"></a>SDInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.SDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SDInit &rArr; disk_initialize &rArr; sspInit &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>SSP_Cmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_ssp.o(i.SSP_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
</UL>

<P><STRONG><a name="[bb]"></a>SSP_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_ssp.o(i.SSP_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
</UL>

<P><STRONG><a name="[78]"></a>SSP_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_ssp.o(i.SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; disk_timerproc &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_timerproc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>UARTGetChar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UARTGetChar &rArr; UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[33]"></a>UARTPutChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec32
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec16
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[37]"></a>UARTPutDec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTPutDec &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[38]"></a>UARTPutDec16</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, debug_frmwrk.o(i.UARTPutDec16))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTPutDec16 &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[39]"></a>UARTPutDec32</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, debug_frmwrk.o(i.UARTPutDec32))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UARTPutDec32 &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[34]"></a>UARTPutHex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTPutHex &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[35]"></a>UARTPutHex16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex16))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTPutHex16 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[36]"></a>UARTPutHex32</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex32))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTPutHex32 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[31]"></a>UARTPuts</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts_
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[32]"></a>UARTPuts_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPuts_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTPuts_ &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[b5]"></a>UART_CheckBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(i.UART_CheckBusy))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a7]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[7e]"></a>UART_Init</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, lpc17xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[7c]"></a>UART_Receive</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lpc17xx_uart.o(i.UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetChar
</UL>

<P><STRONG><a name="[80]"></a>UART_ReceiveByte</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lpc17xx_uart.o(i.UART_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[7d]"></a>UART_Send</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lpc17xx_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>

<P><STRONG><a name="[81]"></a>UART_SendByte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc17xx_uart.o(i.UART_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[82]"></a>UART_TxCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lpc17xx_uart.o(i.UART_TxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[83]"></a>USB_ClrStallEP</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usbhw.o(i.USB_ClrStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[86]"></a>USB_ConfigEP</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbhw.o(i.USB_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[87]"></a>USB_Configure</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbhw.o(i.USB_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[88]"></a>USB_Connect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbhw.o(i.USB_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>USB_DataInStage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[8a]"></a>USB_DataOutStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[8b]"></a>USB_DisableEP</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usbhw.o(i.USB_DisableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[8c]"></a>USB_EnableEP</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usbhw.o(i.USB_EnableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[3b]"></a>USB_EndPoint0</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, usbcore.o(i.USB_EndPoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EndPoint0 &rArr; USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetMaxLUN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>USB_EndPoint2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbuser.o(i.USB_EndPoint2))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = USB_EndPoint2 &rArr; MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_MemoryRead &rArr; disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>USB_GetDescriptor</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_GetDescriptor &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[8f]"></a>USB_GetStatus</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_GetStatus &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, usbhw.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Resume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>USB_Init</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, usbhw.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>USB_ReadEP</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, usbhw.o(i.USB_ReadEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[9c]"></a>USB_Reset</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, usbhw.o(i.USB_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[a2]"></a>USB_ResetCore</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbcore.o(i.USB_ResetCore))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[a1]"></a>USB_ResetEP</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usbhw.o(i.USB_ResetEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[9d]"></a>USB_Reset_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbuser.o(i.USB_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>USB_Resume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>USB_SetAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbhw.o(i.USB_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[90]"></a>USB_SetClrFeature</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, usbcore.o(i.USB_SetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_SetClrFeature &rArr; USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[93]"></a>USB_SetConfiguration</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, usbcore.o(i.USB_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_SetConfiguration &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[95]"></a>USB_SetInterface</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, usbcore.o(i.USB_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[47]"></a>USB_SetStallEP</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usbhw.o(i.USB_SetStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>

<P><STRONG><a name="[8d]"></a>USB_SetupStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(i.USB_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_SetupStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[91]"></a>USB_StatusInStage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbcore.o(i.USB_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[98]"></a>USB_StatusOutStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(i.USB_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[9e]"></a>USB_Suspend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>USB_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_WakeUpCfg))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
</UL>

<P><STRONG><a name="[49]"></a>USB_WriteEP</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, usbhw.o(i.USB_WriteEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
</UL>

<P><STRONG><a name="[9a]"></a>WrCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbhw.o(i.WrCmd))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[85]"></a>WrCmdDat</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usbhw.o(i.WrCmdDat))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>

<P><STRONG><a name="[58]"></a>WriteLE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(i.WriteLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>

<P><STRONG><a name="[a4]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c4]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[56]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[77]"></a>check_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_libcfg_default.o(i.check_failed))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>

<P><STRONG><a name="[a6]"></a>debug_frmwrk_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, debug_frmwrk.o(i.debug_frmwrk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = debug_frmwrk_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>disk_initialize</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, mmc.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_initialize &rArr; sspInit &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspClockSlow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspClockFast
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDInit
</UL>

<P><STRONG><a name="[6f]"></a>disk_ioctl</STRONG> (Thumb, 610 bytes, Stack size 48 bytes, mmc.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disk_ioctl &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_power
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
</UL>

<P><STRONG><a name="[6d]"></a>disk_read</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mmc.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[7b]"></a>disk_timerproc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mmc.o(i.disk_timerproc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_timerproc &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6e]"></a>disk_write</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, mmc.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
</UL>

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; debug_frmwrk_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[7a]"></a>setSSPclock</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lpc17xx_ssp.o(i.setSSPclock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_speed
</UL>

<P><STRONG><a name="[af]"></a>sspClockFast</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp.o(i.sspClockFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sspClockFast &rArr; spi_set_speed &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[ad]"></a>sspClockSlow</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp.o(i.sspClockSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sspClockSlow &rArr; spi_set_speed &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[aa]"></a>sspInit</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ssp.o(i.sspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sspInit &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ConfigStructInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[b7]"></a>sspReceive</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ssp.o(i.sspReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sspReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[bd]"></a>sspSend</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ssp.o(i.sspSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sspSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b1]"></a>chk_power</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmc.o(i.chk_power))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[a8]"></a>deselect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mmc.o(i.deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deselect &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[b0]"></a>power_off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mmc.o(i.power_off))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[ac]"></a>power_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mmc.o(i.power_on))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[b3]"></a>rcvr_datablock</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mmc.o(i.rcvr_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rcvr_datablock &rArr; rcvr_spi &rArr; sspReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspReceive
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[a9]"></a>rcvr_spi</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mmc.o(i.rcvr_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcvr_spi &rArr; sspReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[b2]"></a>select</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mmc.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = select &rArr; wait_ready &rArr; rcvr_spi &rArr; sspReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[ae]"></a>send_cmd</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mmc.o(i.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[b8]"></a>wait_ready</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mmc.o(i.wait_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wait_ready &rArr; rcvr_spi &rArr; sspReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[b4]"></a>xmit_datablock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mmc.o(i.xmit_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xmit_datablock &rArr; wait_ready &rArr; rcvr_spi &rArr; sspReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[b9]"></a>xmit_spi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mmc.o(i.xmit_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xmit_spi &rArr; sspSend
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[ba]"></a>spi_set_speed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssp.o(i.spi_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_set_speed &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspClockSlow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sspClockFast
</UL>

<P><STRONG><a name="[4b]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(i.GPIO_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[73]"></a>set_OpenDrainMode</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(i.set_OpenDrainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[71]"></a>set_PinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(i.set_PinFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[72]"></a>set_ResistorMode</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(i.set_ResistorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[7f]"></a>uart_set_divisors</STRONG> (Thumb, 532 bytes, Stack size 112 bytes, lpc17xx_uart.o(i.uart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a5]"></a>_printf_core</STRONG> (Thumb, 676 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
